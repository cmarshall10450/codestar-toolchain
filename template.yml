AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  ProjectId:
    Type: String
    Description: Name of the project to use in resources
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''

Globals:
  Function:
    AutoPublishAlias: live
    Runtime: python3.7
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${ProjectId}-${Stage}-api"
      StageName: !Ref Stage
      Cors: 
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT'"
        AllowOrigin: "'*'"
      DefinitionBody:
        openapi: 3.0.0
        info:
          title: ${ProjectId}-${Stage}-api
          version: '2016-03-31T18:25:32Z'
        paths:
          "/streams/{stream-name}/records":
            put:
              parameters:
              - name: Content-Type
                in: header
                schema:
                  type: string
              - name: stream-name
                in: path
                required: true
                schema:
                  type: string
              requestBody:
                content:
                  application/json:
                    schema:
                      "$ref": "#/components/schemas/PutRecordBatchMethodRequestPayload"
                  application/x-amz-json-1.1:
                    schema:
                      "$ref": "#/components/schemas/PutRecordBatchMethodRequestPayload"
                required: true
              responses:
                '200':
                  description: 200 response
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: aws
                credentials: !GetAtt ApiGatewayFirehoseRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:firehose:action/PutRecordBatch"
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
                requestTemplates:
                  application/json: |-
                    {
                      "DeliveryStreamName": "$input.params('stream-name')",
                      "Records": [
                        {
                          "Data": "$util.base64Encode($elem.data)"
                        }#if($foreach.hasNext),#end
                      ]
                    }
                  application/x-amz-json-1.1: |-
                    {
                      "DeliveryStreamName": "$input.params('stream-name')",
                      "Records" : [
                        {
                          "Data" : "$elem.data"
                        }#if($foreach.hasNext),#end
                      ]
                    }
                passthroughBehavior: when_no_match
                httpMethod: POST
          "/streams/{stream-name}":
            get:
              parameters:
              - name: stream-name
                in: path
                required: true
                schema:
                  type: string
              responses:
                '200':
                  description: 200 response
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: aws
                credentials: !GetAtt ApiGatewayFirehoseRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:firehose:action/DescribeDeliveryStream"
                responses:
                  default:
                    statusCode: '200'
                requestTemplates:
                  application/json: |-
                    {
                      "DeliveryStreamName": "$input.params('stream-name')"
                    }
                passthroughBehavior: when_no_match
                httpMethod: POST
          "/streams/{stream-name}/record":
            put:
              parameters:
              - name: stream-name
                in: path
                required: true
                schema:
                  type: string
              responses:
                '200':
                  description: 200 response
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: aws
                credentials: !GetAtt ApiGatewayFirehoseRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:firehose:action/PutRecord"
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
                requestTemplates:
                  application/json: |-
                    {
                      "DeliveryStreamName": "$input.params('stream-name')",
                      "Record": {
                        "Data": "$util.base64Encode($input.json('$.Data'))"
                      }
                    }
                passthroughBehavior: when_no_match
                httpMethod: POST
          "/streams":
            get:
              responses:
                '200':
                  description: 200 response
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: aws
                credentials: !GetAtt ApiGatewayFirehoseRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:firehose:action/ListDeliveryStreams"
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
                requestTemplates:
                  application/json: |-
                    {
                    }
                passthroughBehavior: when_no_match
                httpMethod: POST
        components:
          schemas:
            Empty:
              type: object
            PutRecordBatchMethodRequestPayload:
              type: object
              properties:
                records:
                  type: array
                  items:
                    type: object
                    properties:
                      data:
                        type: string

  CustomerProfile:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectId}-customer-profile-${Stage}-fn'
      CodeUri: ./
      Handler: customer/profile.handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        CreateCustomerProfile:
          Type: Api
          Properties:
            Path: /customer/profile
            Method: post
            RestApiId: !Ref Api
      Environment:
        Variables:
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: CustomerProfile
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Description: Service role in IAM for AWS Lambda
    Properties:
      RoleName: !Sub '${ProjectId}-${Stage}-execution-role'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  ApiGatewayFirehoseRole:
    Type: AWS::IAM::Role
    Description: Service role in IAM for AWS Api Gateway to send requests to AWS Kinesis Firehose
    Properties:
      RoleName: !Sub '${ProjectId}-${Stage}-apigatewayfirehose-role'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [apigateway.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonKinesisFirehoseFullAccess'

  FirehoseDeliveryLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "${ProjectId}-firehose-delivery-logs"
      KmsKeyId: !GetAtt ProjectKmsKey.Arn

  FirehoseDeliveryLogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogStreamName: !Sub "${ProjectId}-firehose-delivery-log-stream"
      LogGroupName: !Ref FirehoseDeliveryLogGroup

  FirehoseDeliveryRole:
    Type: AWS::IAM::Role
    Description: Service role in IAM for AWS Api Gateway to send requests to AWS Kinesis Firehose
    Properties:
      RoleName: !Sub '${ProjectId}-${Stage}-firehose-delivery-role'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [firehose.amazonaws.com]
          Action: sts:AssumeRole
      Path: /

  FirehoseDeliveryRolePolicy:
    Type: AWS::IAM::Policy
    DependsOn:
    - FirehoseDeliveryRole
    Properties: 
      PolicyName: !Sub "${ProjectId}-${Stage}-firehose-delivery-role-policy"
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:AbortMultipartUpload
          - s3:GetBucketLocation
          - s3:GetObject
          - s3:ListBucket
          - s3:ListBucketMultipartUploads
          - s3:PutObject
          Resource:
          - !GetAtt DataBucket.Arn
          - !Sub "${DataBucket.Arn}/*"
        - Effect: Allow
          Action:
          - logs:PutLogEvents
          Resource:
          - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${FirehoseDeliveryLogGroup}:log-stream:${FirehoseDeliveryLogStream}"
        # - Effect: Allow
        #   Action:
        #   - lambda:InvokeFunction
        #   - lambda:GetFunctionConfiguration
        #   Resource:
        #   - arn:aws:lambda:region:account-id:function:function-name:function-version
      Roles: 
        - !Ref FirehoseDeliveryRole

  ProjectKmsKey:
    Type: AWS::KMS::Key
    DependsOn:
    - FirehoseDeliveryRole
    Properties:
      Description: KMS encryption key for project
      EnableKeyRotation: true
      PendingWindowInDays: 20
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: kms:*
          Resource: '*'
        - Sid: Allow use of the key
          Effect: Allow
          Principal:
            AWS: !GetAtt FirehoseDeliveryRole.Arn
          Action:
          - kms:DescribeKey
          - kms:Encrypt
          - kms:Decrypt
          - kms:ReEncrypt*
          - kms:GenerateDataKey
          - kms:GenerateDataKeyWithoutPlaintext
          Resource: '*'
        - Sid: Allow CloudWatch to encrypt logs
          Effect: Allow
          Principal:
            Service: !Sub "logs.${AWS::Region}.amazonaws.com"
          Action:
          - kms:Encrypt*
          - kms:Decrypt*
          - kms:ReEncrypt*
          - kms:GenerateDataKey*
          - kms:Describe*
          Resource: "*"
          Condition:
            ArnEquals:
              kms:EncryptionContext:aws:logs:arn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ProjectId}-firehose-delivery-logs"


  ProjectKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties: 
      AliasName: !Sub "alias/${ProjectId}-data-key"
      TargetKeyId: !Ref ProjectKmsKey

  DataBucket:
    Type: AWS::S3::Bucket
    DependsOn:
    - ProjectKmsKey
    - ProjectKmsKeyAlias
    Properties:
      BucketName: !Sub "${ProjectId}-data-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: !Ref ProjectKmsKey
    DeletionPolicy: Retain

  FirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
    - DataBucket
    - FirehoseDeliveryRole
    - FirehoseDeliveryRolePolicy
    Properties:
      DeliveryStreamName: !Sub "${ProjectId}-${Stage}-delivery-stream"
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt DataBucket.Arn
        RoleARN: !GetAtt FirehoseDeliveryRole.Arn
        EncryptionConfiguration:
          KMSEncryptionConfig:
            AWSKMSKeyARN: !GetAtt ProjectKmsKey.Arn
        Prefix: processed/
        ErrorOutputPrefix: erroneous/
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref FirehoseDeliveryLogGroup
          LogStreamName: !Ref FirehoseDeliveryLogStream
