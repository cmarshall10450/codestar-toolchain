AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  ProjectId:
    Type: String
    Description: Name of the project to use in resources
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''

Globals:
  Function:
    AutoPublishAlias: live
    Runtime: python3.7
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${ProjectId}-${Stage}-api"
      StageName: !Ref Stage
      Cors: 
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT'"
        AllowOrigin: "'*'"
      DefinitionBody:
        openapi: 3.0.0
        info:
          title: ${ProjectId}-${Stage}-api
          version: '2016-03-31T18:25:32Z'
        paths:
          "/streams/{stream-name}/sharditerator":
            get:
              parameters:
              - name: stream-name
                in: path
                required: true
                schema:
                  type: string
              - name: shard-id
                in: query
                schema:
                  type: string
              responses:
                '200':
                  description: 200 response
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: aws
                credentials: arn:aws:iam::463559647631:role/admire-api-kinesis-role
                uri: arn:aws:apigateway:us-east-1:kinesis:action/GetShardIterator
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
                requestTemplates:
                  application/json: |-
                    {
                        "ShardId": "$input.params('shard-id')",
                        "ShardIteratorType": "TRIM_HORIZON",
                        "StreamName": "$input.params('stream-name')"
                    }
                passthroughBehavior: when_no_match
                httpMethod: POST
          "/streams/{stream-name}/records":
            get:
              parameters:
              - name: stream-name
                in: path
                required: true
                schema:
                  type: string
              - name: Shard-Iterator
                in: header
                schema:
                  type: string
              responses:
                '200':
                  description: 200 response
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: aws
                credentials: arn:aws:iam::463559647631:role/admire-api-kinesis-role
                uri: arn:aws:apigateway:us-east-1:kinesis:action/GetRecords
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
                requestTemplates:
                  application/json: |-
                    {
                        "ShardIterator": "$input.params('Shard-Iterator')"
                    }
                passthroughBehavior: when_no_match
                httpMethod: POST
            put:
              parameters:
              - name: Content-Type
                in: header
                schema:
                  type: string
              - name: stream-name
                in: path
                required: true
                schema:
                  type: string
              requestBody:
                content:
                  application/json:
                    schema:
                      "$ref": "#/components/schemas/PutRecordsMethodRequestPayload"
                  application/x-amz-json-1.1:
                    schema:
                      "$ref": "#/components/schemas/PutRecordsMethodRequestPayload"
                required: true
              responses:
                '200':
                  description: 200 response
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: aws
                credentials: arn:aws:iam::463559647631:role/admire-api-kinesis-role
                uri: arn:aws:apigateway:us-east-1:kinesis:action/PutRecords
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
                requestTemplates:
                  application/json: |-
                    {
                        "StreamName": "$input.params('stream-name')",
                        "Records": [
                              {
                                "Data": "$util.base64Encode($elem.data)",
                                "PartitionKey": "$elem.partition-key"
                              }#if($foreach.hasNext),#end
                        ]
                    }
                  application/x-amz-json-1.1: |-
                    {
                      "StreamName": "$input.params('stream-name')",
                      "records" : [
                        {
                            "Data" : "$elem.data",
                            "PartitionKey" : "$elem.partition-key"
                        }#if($foreach.hasNext),#end
                      ]
                    }
                passthroughBehavior: when_no_match
                httpMethod: POST
          "/streams/{stream-name}":
            get:
              parameters:
              - name: stream-name
                in: path
                required: true
                schema:
                  type: string
              responses:
                '200':
                  description: 200 response
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: aws
                credentials: arn:aws:iam::463559647631:role/admire-api-kinesis-role
                uri: arn:aws:apigateway:us-east-1:kinesis:action/DescribeStream
                responses:
                  default:
                    statusCode: '200'
                requestTemplates:
                  application/json: |-
                    {
                        "StreamName": "$input.params('stream-name')"
                    }
                passthroughBehavior: when_no_match
                httpMethod: POST
            post:
              parameters:
              - name: stream-name
                in: path
                required: true
                schema:
                  type: string
              responses:
                '200':
                  description: 200 response
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: aws
                credentials: arn:aws:iam::463559647631:role/admire-api-kinesis-role
                uri: arn:aws:apigateway:us-east-1:kinesis:action/CreateStream
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
                requestTemplates:
                  application/json: |-
                    {
                        "ShardCount": 5,
                        "StreamName": "$input.params('stream-name')"
                    }
                passthroughBehavior: when_no_match
                httpMethod: POST
            delete:
              parameters:
              - name: stream-name
                in: path
                required: true
                schema:
                  type: string
              responses:
                '200':
                  description: 200 response
                  headers:
                    Content-Type:
                      schema:
                        type: string
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/Empty"
                '400':
                  description: 400 response
                  headers:
                    Content-Type:
                      schema:
                        type: string
                  content: {}
                '500':
                  description: 500 response
                  headers:
                    Content-Type:
                      schema:
                        type: string
                  content: {}
              x-amazon-apigateway-integration:
                type: aws
                credentials: arn:aws:iam::463559647631:role/admire-api-kinesis-role
                uri: arn:aws:apigateway:us-east-1:kinesis:action/DeleteStream
                responses:
                  4\d{2}:
                    statusCode: '400'
                    responseParameters:
                      method.response.header.Content-Type: integration.response.header.Content-Type
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Content-Type: integration.response.header.Content-Type
                  5\d{2}:
                    statusCode: '500'
                    responseParameters:
                      method.response.header.Content-Type: integration.response.header.Content-Type
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
                requestTemplates:
                  application/json: |-
                    {
                        "StreamName": "$input.params('stream-name')"
                    }
                passthroughBehavior: when_no_match
                httpMethod: POST
          "/streams/{stream-name}/record":
            put:
              parameters:
              - name: stream-name
                in: path
                required: true
                schema:
                  type: string
              responses:
                '200':
                  description: 200 response
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: aws
                credentials: arn:aws:iam::463559647631:role/admire-api-kinesis-role
                uri: arn:aws:apigateway:us-east-1:kinesis:action/PutRecord
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
                requestTemplates:
                  application/json: |-
                    {
                        "StreamName": "$input.params('stream-name')",
                        "Data": "$util.base64Encode($input.json('$.Data'))",
                        "PartitionKey": "$input.path('$.PartitionKey')"
                    }
                passthroughBehavior: when_no_match
                httpMethod: POST
          "/streams":
            get:
              responses:
                '200':
                  description: 200 response
                  content:
                    application/json:
                      schema:
                        "$ref": "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: aws
                credentials: arn:aws:iam::463559647631:role/admire-api-kinesis-role
                uri: arn:aws:apigateway:us-east-1:kinesis:action/ListStreams
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
                requestTemplates:
                  application/json: |-
                    {
                    }
                passthroughBehavior: when_no_match
                httpMethod: POST
        components:
          schemas:
            Empty:
              type: object
            PutRecordsMethodRequestPayload:
              type: object
              properties:
                records:
                  type: array
                  items:
                    type: object
                    properties:
                      data:
                        type: string
                      partition-key:
                        type: string


  CustomerProfile:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectId}-customer-profile-${Stage}-fn'
      CodeUri: ./
      Handler: customer/profile.handler
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        CreateCustomerProfile:
          Type: Api
          Properties:
            Path: /customer/profile
            Method: post
            RestApiId: !Ref Api
      Environment:
        Variables:
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: CustomerProfile
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectId}-${Stage}-execution-role'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'